/* Parser to emit a name returned by the scanner as a string token */
/* Demonstrates Bison C++ complete interface see Bison 10.1.6.2 Complete Symbols */
/* Compile: bison -d reflexexample11.yxx */

%require "3.2"

%language "c++"
%define api.namespace {yy}
%define api.parser.class {parser}
%define api.value.type variant
%define api.token.constructor

%define parse.error verbose

%defines
%output "parser.cpp"

%locations
%define api.location.file "location.hpp"

%parse-param { yy::scanner& lexer }

%define api.token.prefix {TOK_}
%token <std::string> TOKEN "Token"
%token EOF 0 "End of file"

%code requires {
  namespace yy {
    class scanner;
  };
}

%code {
  #include "scanner.hpp"  /* Generated by reflex. */
  #include <iostream>
  #include <fstream>
  #undef yylex
  #define yylex lexer.lex  /* Within bison's parse() we should invoke lexer.yylex(), not the global yylex() */
}

%%

rule: TOKEN { std::cout << $1 << std::endl; };

%%

void yy::parser::error(const location& loc, const std::string& msg)
{
  std::cerr << loc << ": " << msg << std::endl;
}

int main(int argc, char **argv)
{
  if (argc < 2)
    return 1;

  std::ifstream ifs(argv[1], std::ios::in);
  yy::scanner scanner(ifs, std::cout);
  yy::parser parser(scanner);
  return parser.parse();
}
